function timing_data = AVK_timing_Analyse(ephys_data, channels, resp_win, psth_bins, artifact_win)
% TIMING_DATA = timing_plots(EPHYS_DATA)
% or
% TIMING_DATA = timing_plots(EPHYS_DATA, CHANNELS, RESP_WIN, PSTH_BINS, ARTIFACT_WIN)
% 
% Visualise data and extract key measures from 'Timing' experiment, in which
% an optogenetic stimulus is pulsed at varying time intervals with respect to
% a whisker stimulus.
% 
% This function will plot the following:
% 
% Figure 1: Raster plots for each of the time delays
% Figure 2: Post stimulus time histograms (PSTHs) for each of the time delays
% Figure 3: Spike density plots for each of the time delays
% Figure 4: Point plots showing binned spike rate, peak spike rate and peak
%           spike time for each of the time delays
% 
% REQUIRED INPUTS:
% 
% EPHYS_DATA: EPHYS_DATA structure as generated by preprocess_multiunit, containing
% spike data and metadata for a 'Timing' type experiment.
% 
% OPTIONAL:
% 
% CHANNELS:     Specify which channels, e.g. [1:8]; Default is ':' (all). 
% RESP_WIN:     Window for assessing spiking response; Default is [0.007 0.030].
% PSTH_BINS:    Bins for PSTH and spike density plots; Default is [-0.1:0.001:0.3]
% ARTIFACT_WIN: To remove potential artifacts, spike times in this window 
%               (with respect to whisker stim onset) are set to NaN. Default 
%               is [-0.001 0.006].
% 
% OUTPUT:
% 
% TIMING_DATA structure with fields:
% 
% timing_data.data_folder             = Original data folder
% 
% timing_data.channels                = Requested channels
% timing_data.resp_win                = Requested response window
% timing_data.artifact_win            = Requested artifact window
% timing_data.psth_bins               = Bins for PSTH and spike density plots
% timing_data.bin_size                = Bin size of above
% 
% timing_data.delta_t                 = Delta_t values for each condition (opto vs whisk time difference)
% 
% timing_data.all_psth_counts         = PSTHs for all conditions, (n bins * n conditions)
% timing_data.density_rates           = Spike density rates for all conditions, (n channels * n bins * n conditions)
% 
% timing_data.binned_spike_rate       = Binned spike rate in specified response window (n trials * n conditions)
% timing_data.mean_binned_spike_rate  = Mean of binned spike rate
% timing_data.serr_binned_spike_rate  = Standard error of the mean binned spike rate
% timing_data.binned_rate_p           = P values compared to control condition
% timing_data.bonf_binned_rate_p      = Bonferroni corrected p-values compared to control condition
% 
% timing_data.peak_spike_rates        = Peak spike rate in specified response window (n trials * n conditions)
% timing_data.mean_peak_spike_rate    = Mean of peak spike rate
% timing_data.serr_peak_spike_rate    = Standard error of the mean peak spike rate
% timing_data.peak_rate_p             = P values compared to control condition
% timing_data.bonf_peak_rate_p        = Bonferroni corrected p-values compared to control condition
% 
% timing_data.peak_spike_times        = Peak spike time in specified response window (n trials * n conditions)
% timing_data.mean_peak_spike_time    = Mean of peak spike time
% timing_data.serr_peak_spike_time    = Standard error of the mean peak spike time
% timing_data.peak_time_p             = P values compared to control condition
% timing_data.bonf_peak_time_p        = Bonferroni corrected p-values compared to control condition
%

% Default to all channels
if nargin < 2 || isempty(channels)
    channels        = ':';
end

% Default to resp win from 6ms (after any artifacts) to 30ms (should capture
% most of the direct stimulus-driven activity
if nargin < 3 || isempty(resp_win)
    resp_win        = [0.004 0.030];
end

% Default PSTH range; 300ms post stimulus should capture even long-tailed responses
if nargin < 4 || isempty(psth_bins)
    psth_bins       = [-0.1:0.001:0.3];
end

% Set any spikes during this window to NaN; -0.001 to 0.006 is where any piezo artifacts
% may occur
if nargin < 5
    artifact_win    = [-0.001 0.004];
end

% Hardcoded for now:
rate_kernel_size    = 0.01;
spont_resp_win = [-0.025 -0.005];
LED_artifact_win = [-0.002 0.0025];
Opto_sample_points = [-0.05 1];
L5_Channels = [16:25];
L23_Channels = [1:9];

%% Code execution starts here

opto_onsets             = [ephys_data.conditions(:).LED_onset];
opto_length             = nanmedian([ephys_data.conditions(:).LED_duration]);
n_delta_ts              = length(opto_onsets);
opto_resp_win       = [opto_length+LED_artifact_win(2) 0.02];
output_dir = ['D:\Timing\' ephys_data.data_folder '\' ephys_data.data_folder];
% Set up some figures
raster_plot_h         	= figure;
set(gcf,'Units','Normalized','Position',[.3 0 .4 1],'PaperPositionMode','auto')
psth_h                  = figure;
set(gcf,'Units','Normalized','Position',[.3 0 .4 1],'PaperPositionMode','auto')
raster_L5_h         	= figure;
set(gcf,'Units','Normalized','Position',[.3 0 .4 1],'PaperPositionMode','auto')

counter                 = 0;
spike_rates = NaN*ones(100,length(ephys_data.conditions));
peak_spike_rates= NaN*ones(100,length(ephys_data.conditions));
peak_spike_times = NaN*ones(100,length(ephys_data.conditions));
opto_spike_rates = [];
spont_rates = [];
    



for a = 1:length(ephys_data.conditions)
    
    % Fetch data for this condition
    this_cond                       = ephys_data.conditions(a);
    
    % Increment counter and find stimulus data for this condition
    counter                         = counter + 1;
    this_t_whisk                    = this_cond.whisk_onset;
    this_t_opto                     = round(this_cond.LED_onset,2);
    this_whisker_nr                 = this_cond.whisk_stimulator;
    n_trials(counter)             	= this_cond.n_trials;
    
    delta_t(counter)                = this_t_opto - this_t_whisk;
    LED_artifacts(1,:) = delta_t(counter)+LED_artifact_win;
    LED_artifacts(2,:) = delta_t(counter)+LED_artifact_win+this_cond.LED_duration;
    
    whisker_nr(counter)             = this_whisker_nr;
    opto_power(counter)             = this_cond.LED_power;
    
      % Get spike data and remove artifact spikes
    spikes                          = this_cond.spikes(channels, :, :) - this_t_whisk;
    
    q_artifact                      = spikes > artifact_win(1) & spikes < artifact_win(2);
    spikes(q_artifact)              = NaN;
    for k =1 : size(LED_artifacts,1)
    q_artifact                      = spikes > LED_artifacts(k,1) & spikes < LED_artifacts(k,2);   
    spikes(q_artifact)              = NaN;
    end;    
    
    %% Layer 5 opto response for experiment
     opto_spikes                  	= (spikes(L5_Channels,:,:) + this_t_whisk) - this_t_opto;
     Temp_Opto_Rates = spike_rate_by_trial(opto_spikes,opto_resp_win);%peak_ROF_by_trial(opto_spikes, opto_resp_win, rate_kernel_size);
     Temp_Spont_Rates = spike_rate_by_trial(opto_spikes,spont_resp_win);
        if delta_t(counter) < Opto_sample_points(1) || delta_t(counter) > Opto_sample_points(2) 
        opto_spike_rates = [opto_spike_rates;Temp_Opto_Rates];
        spont_rates = [spont_rates;Temp_Spont_Rates];
        
        figure(raster_L5_h)
        subplot(n_delta_ts,1,counter)
        raster_plot(opto_spikes,2);
        xlim([min(psth_bins) max(psth_bins)])
        title(['Opto-whisk delay = ' num2str(-delta_t(counter) * 1000) 'ms'])
        ylabel('Trial nr')
        set(gca,'FontName','Helvetica','FontWeight','Bold','box','off')
        end;
         clear Temp_Opto_Rates Temp_Spont_Rates;
    
    %% Layer 2_3 whisker modulation
     

   
    % Binned spike rate
     Temp_spikes = spike_rate_by_trial(spikes(L23_Channels,:,:), resp_win);
    [spike_rates(1:numel(Temp_spikes),counter)]    = Temp_spikes;    
       clear Temp_spikes;
    
    mean_spike_rate(counter)        = nanmean(spike_rates(:,counter));
    serr_spike_rate(counter)        = serr(spike_rates(counter,:));
    
    % Peak spike rate and time
    [Temp_Peak_rates, Temp_Peak_times]  = peak_ROF_by_trial(spikes(L23_Channels,:,:), resp_win, rate_kernel_size);
     peak_spike_rates(1:numel(Temp_Peak_rates),counter) =  Temp_Peak_rates;
     peak_spike_times(1:numel(Temp_Peak_times),counter) =  Temp_Peak_times;
     clear Temp_Peak_rates Temp_Peak_times;
     
    mean_peak_spike_rate(counter)   = nanmean(peak_spike_rates(:,counter));
    serr_peak_spike_rate(counter)   = serr(peak_spike_rates(:,counter));
    
    mean_peak_spike_time(counter)   = nanmean(peak_spike_times(:,counter));
    serr_peak_spike_time(counter)   = serr(peak_spike_times(:,counter));
    
     
    %% Figures
    
    % Raster plots
    figure(raster_plot_h)
    subplot(n_delta_ts,1,counter)
    raster_plot(spikes(L23_Channels,:,:),2);
    xlim([min(psth_bins) max(psth_bins)])
    title(['Opto-whisk delay = ' num2str(-delta_t(counter) * 1000) 'ms'])
    ylabel('Trial nr')
    set(gca,'FontName','Helvetica','FontWeight','Bold','box','off')
    
    % PSTH
    figure(psth_h)
    subplot(n_delta_ts,1,counter)
    [plot_handle, all_psth_counts(:,counter), psth_bins]  = psth(spikes(L23_Channels,:,:), psth_bins);
    
    q_whisk_time            = psth_bins > 0 & psth_bins < 0.1;
    max_whisk_y(counter)    = max(all_psth_counts(q_whisk_time,counter));

     % Set sensible axis and labels
    title(['Opto-whisk delay = ' num2str(-delta_t(counter) * 1000) 'ms'])
    ylabel('Spike count')
    
    set(gca,'FontName','Helvetica','FontWeight','Bold','box','off')
    
end;


%% Plots of spiking response metrics

q_below_0       	= delta_t <= 0; % Select only instances where the opto stimulus happened before the whisk
figure
set(gcf,'Units','Normalized','Position',[.1 .4 .8 .4],'PaperPositionMode','auto')

% Binned spike rate
subplot(1,3,1)
%errorbar(delta_t(q_below_0),mean_spike_rate(q_below_0),serr_spike_rate(q_below_0),'k.-','LineWidth',2,'MarkerSize',20);
point_plot(spike_rates(:,q_below_0),delta_t(q_below_0))
xlimits     = xlim;
line([xlimits],[mean_spike_rate(end) mean_spike_rate(end)],'Color',[1 0 0],'LineWidth',2,'LineStyle',':')
xlim(xlimits)
title('Binned spike rate')
ylabel('Mean spike rate')
xlabel('Opto-whisk time delay')
fixplot
yzero

% Peak spike rate
subplot(1,3,2)
%errorbar(delta_t(q_below_0),mean_peak_spike_rate(q_below_0),serr_peak_spike_rate(q_below_0),'k.-','LineWidth',2,'MarkerSize',20)
point_plot(peak_spike_rates(:,q_below_0),delta_t(q_below_0))
xlimits     = xlim;
line([xlimits],[mean_peak_spike_rate(end) mean_peak_spike_rate(end)],'Color',[1 0 0],'LineWidth',2,'LineStyle',':')
xlim(xlimits)
title('Peak spike rate')
ylabel('Peak spike rate')
xlabel('Opto-whisk time delay')
fixplot
yzero

% Peak spike time
subplot(1,3,3)
%errorbar(delta_t(q_below_0),mean_peak_spike_time(q_below_0),serr_peak_spike_time(q_below_0),'k.-','LineWidth',2,'MarkerSize',20)
point_plot(peak_spike_times(:,q_below_0),delta_t(q_below_0))
xlimits     = xlim;
line([xlimits],[mean_peak_spike_time(end) mean_peak_spike_time(end)],'Color',[1 0 0],'LineWidth',2,'LineStyle',':')
xlim(xlimits)
title('Peak spike time')
ylabel('Peak spike time')
xlabel('Opto-whisk time delay')
fixplot
yzero


%% Some stats on the firing rate differences compared to control

[binned_rate_h binned_rate_p] = ttest2(spike_rates,repmat(spike_rates(:,end),1,length(delta_t)));

[peak_rate_h peak_rate_p] = ttest2(peak_spike_rates,repmat(peak_spike_rates(:,end),1,length(delta_t)));

[peak_time_h peak_time_p] = ttest2(peak_spike_times,repmat(peak_spike_times(:,end),1,length(delta_t)));



[Opto_L5_p Opto_L5_h] = ranksum(opto_spike_rates,spont_rates,'tail','right');


% Bonferroni correction for multiple comparisons; this should be on the conservative side
bonf_binned_rate_p          = binned_rate_p * (length(delta_t)-1);
bonf_peak_rate_p            = peak_rate_p * (length(delta_t)-1);
bonf_peak_time_p            = peak_time_p * (length(delta_t)-1);


%% Set output variable timing_data

timing_data.data_folder             = ephys_data.data_folder;

timing_data.channels                = channels;
timing_data.resp_win                = resp_win;
timing_data.artifact_win            = artifact_win;
timing_data.psth_bins               = psth_bins;
timing_data.bin_size                = mean(diff(psth_bins));

timing_data.delta_t                 = delta_t;

timing_data.L5_Opto                 = opto_spike_rates;
timing_data.L5_Spont                 = spont_rates;
timing_data.opto_resp_h = Opto_L5_h;
timing_data.opto_resp_p = Opto_L5_p;
timing_data.Mean_L5_Opto_delta = nanmean(timing_data.L5_Opto)-nanmean(timing_data.L5_Spont);

timing_data.binned_spike_rate       = spike_rates;
timing_data.mean_binned_spike_rate  = mean_spike_rate;
timing_data.serr_binned_spike_rate  = serr_spike_rate;
timing_data.binned_rate_p           = binned_rate_p;
timing_data.bonf_binned_rate_p      = bonf_binned_rate_p;

timing_data.peak_spike_rates        = peak_spike_rates;
timing_data.mean_peak_spike_rate    = mean_peak_spike_rate;
timing_data.serr_peak_spike_rate    = serr_peak_spike_rate;
timing_data.peak_rate_p             = peak_rate_p;
timing_data.bonf_peak_rate_p        = bonf_peak_rate_p;

timing_data.peak_spike_times        = peak_spike_times;
timing_data.mean_peak_spike_time    = mean_peak_spike_time;
timing_data.serr_peak_spike_time    = serr_peak_spike_time;
timing_data.peak_time_p             = peak_time_p;
timing_data.bonf_peak_time_p        = bonf_peak_time_p;

hc = figure;
set(gcf,'Units','Normalized','Position',[.1 .4 .8 .4],'PaperPositionMode','auto')

% Binned spike rate
subplot(1,2,1)
%errorbar(delta_t(q_below_0),mean_spike_rate(q_below_0),serr_spike_rate(q_below_0),'k.-','LineWidth',2,'MarkerSize',20);
point_plot(timing_data.L5_Opto)
xlimits     = xlim;
title(['L5 Opto Binned spike rate p =' num2str(Opto_L5_p)])
ylabel('Binned spike rate')
fixplot
yzero

subplot(1,2,2)
%errorbar(delta_t(q_below_0),mean_spike_rate(q_below_0),serr_spike_rate(q_below_0),'k.-','LineWidth',2,'MarkerSize',20);
point_plot(timing_data.L5_Spont)
xlimits     = xlim;
title('L5 Binned Spont rate')
ylabel('Binned spike rate')
fixplot
yzero


%% saving

if ~exist([output_dir], 'dir')
       mkdir([output_dir])
end


disp(['Saving figures to...' output_dir]);
disp('Raster..');
saveas(raster_plot_h,[output_dir '_raster.fig']);
saveas(raster_plot_h,[output_dir '_raster.png']);
disp('PSTH...');
saveas(psth_h,[output_dir '_PSTH.fig']);
saveas(psth_h,[output_dir '_PSTH.png']);
disp('Layer 5');
saveas(raster_L5_h,[output_dir '_L5_Raster.fig']);
saveas(raster_L5_h,[output_dir '_L5_Raster.png']);
disp('Layer 5');
saveas(hc,[output_dir '_L5_Stats.fig']);
saveas(hc,[output_dir '_L5_Stats.png']);
disp('Saved');
end
