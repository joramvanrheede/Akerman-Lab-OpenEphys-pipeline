function drive_data = AVK_drive_analysis(ephys_data, channels, resp_win, psth_bins, artifact_win)
% function drive_data = drive_plots(EPHYS_DATA),
% function drive_data = drive_plots(EPHYS_DATA, CHANNELS, RESP_WIN, PSTH_BINS, ARTIFACT_WIN)
% 
% Visualise data and extract key measures from 'drive' experiment, in which
% a whisker stimulus happens either during (condition 1) or separate from
% a continuous optogenetic stimulus.
% 
% This function will plot the following:
% 
% Figure 1: A raster plot for both conditions:
% Figure 2: A PSTH for both conditions:
% Figure 3: A spike density plot for both conditions:
% Figure 4: A raster plot, PSTH and spike density plot of the opto response
% Figure 5: A comparison of binned spike rate, peak spike rate and peak spike
%           time for both conditions including p-values
% 
% REQUIRED INPUTS:
% 
% EPHYS_DATA: EPHYS_DATA structure as generated by preprocess_multiunit, containing
% spike data and metadata for a 'Drive' type experiment.
% 
% OPTIONAL:
% 
% CHANNELS:     Specify which channels, e.g. [1:8]; Default is ':' (all). 
% RESP_WIN:     Window for assessing spiking response; Default is [0.007 0.030].
% PSTH_BINS:    Bins for PSTH and spike density plots; Default is [-0.1:0.001:0.3]
% ARTIFACT_WIN: To remove potential artifacts, spike times in this window are 
%               set to NaN. Default is [-0.001 0.006].
% 
% OUTPUT: a data structure DRIVE_DATA with fields:
%
% drive_data.data_folder            = Original data folder
% drive_data.channels               = Requested channels
% drive_data.resp_win               = Requested response win
% drive_data.psth_bins              = Requested PSTH bins
% drive_data.opto_psth_bins         = PSTH bins for opto response
% drive_data.bin_size               = PSTH bin size
% drive_data.artifact_win           = Window to discard for artifact purposes
% 
% drive_data.binned_rate_by_trial   = Average spike rate over the specified response window
% drive_data.peak_rate_by_trial     = Peak spike rate in the specified response window
% drive_data.peak_time_by_trial     = Time of peak spike rate in the specified response window
% 
% drive_data.psths                  = PSTH counts for the whisker in both conditions (time bins x condition)
% drive_data.spike_density          = Spike density counts for both conditions (channel x time bins x condition) 
% 
% drive_data.opto_psths             = PSTH counts for the opto stimulus only
% drive_data.opto_spike_density     = Spike density counts for opto only (channel x time bins)
%
% drive_data.binned_rate_p          = Parametric P-value for binned spike rate comparison
% drive_data.binned_rate_rank_p     = Non-parametric P-value for binned spike rate comparison
% 
% drive_data.peak_rate_p            = Parametric P-value for peak spike rate comparison
% drive_data.peak_rate_rank_p       = Non-parametric P-value for peak spike rate comparison
% 
% drive_data.peak_time_p            = Parametric P-value for peak spike time comparison
% drive_data.peak_time_rank_p       = Non-arametric P-value for peak spike time comparison
% 

% Default to all channels
if nargin < 2 || isempty(channels)
    channels        = ':';
end

% Default to resp win from 6ms (after any artifacts) to 30ms (should capture
% most of the direct stimulus-driven activity
if nargin < 3 || isempty(resp_win)
    resp_win        = [0.007 0.1];
end

% Default PSTH range; 300ms post stimulus should capture even long-tailed responses
if nargin < 4 || isempty(psth_bins)
    psth_bins       = [-1:0.001:1];
end

% Set any spikes during this window to NaN; -0.001 to 0.006 is where any piezo artifacts
% may occur
if nargin < 5
    artifact_win    = [-0.001 0.006];
end

% Hardcoded for now:
cond_names          = {'Whisk + opto' 'Whisk only'};    % Condition nicknames
rate_kernel_win     = [0.01];	% 3SD gaussian kernel to aggregate spikes for peak spike rate
clim_perc           = 0.5;      % Percentile for setting max color limit;
opto_psth_margin    = 0.3;      % margin (in seconds) around opto stimulation to include in opto PSTHs
Layer_2_3_Chans = [1:8];
Layer_5_Chans = [16:25];


%% Running code starts here

cond_data             	= ephys_data.conditions;

% Find the time window in the opto response
opto_whisk_win_offset   = cond_data(1).whisk_onset - cond_data(1).LED_onset; % First condition should be opto and whisk
opto_resp_win           = resp_win + opto_whisk_win_offset;

opto_duration           = cond_data(2).LED_duration;
bin_size                = mean(diff(psth_bins));
opto_psth_bins          = [(-opto_psth_margin):bin_size:(opto_duration+opto_psth_margin)];

plot_lims               = [psth_bins(1) psth_bins(end)];
opto_plot_lims          = [opto_psth_bins(1) opto_psth_bins(end)];

% Pre-create figures of the right size
raster_fig_h            = figure;
set(gcf,'Units','normalized','Position',[.1 .2 .8 .4],'PaperPositionMode','auto','Name',[ephys_data.data_folder ' Power: ' num2str(ephys_data.conditions(2).LED_power)])
psth_fig_h              = figure;
set(gcf,'Units','normalized','Position',[.1 .2 .8 .4],'PaperPositionMode','auto','Name',[ephys_data.data_folder ' Power: ' num2str(ephys_data.conditions(2).LED_power)])
opto_fig_h              = figure;
set(gcf,'Units','normalized','Position',[.1 .1 .8 .8],'PaperPositionMode','auto','Name',[ephys_data.data_folder ' Power: ' num2str(ephys_data.conditions(2).LED_power)]);

for a = 1:length(cond_data)
    
       spikes                      = cond_data(a).spikes(channels,:,:) - cond_data(a).whisk_onset;
    
    q_artifact                  = spikes > artifact_win(1) & spikes < artifact_win(2);
    spikes(q_artifact)          = NaN;
    
%% Layer 5 Opto Response
    if a == 2
       % Quantify opto spikes
    opto_spikes                 = cond_data(a).spikes(Layer_5_Chans,:,:) - cond_data(a).LED_onset;
    L5all_opto_spike_rates(:)  	= spike_rate_by_trial(opto_spikes, opto_resp_win);
    
    spont_spikes              	= cond_data(a).spikes(Layer_5_Chans,:,:);
    L5all_spont_spike_rates(:)	= spike_rate_by_trial(spont_spikes, opto_resp_win);
    [drive_data.p_L5_resp,drive_data.h_L5_resp] = ranksum(L5all_opto_spike_rates,L5all_spont_spike_rates,'tail','right'); 
    
    drive_data.L5all_opto = L5all_opto_spike_rates(:);
    drive_data.L5all_spont = L5all_spont_spike_rates(:)
    drive_data.Mean_L5_Opto = nanmean(L5all_opto_spike_rates);
    drive_data.Mean_L5_Spont = nanmean(L5all_spont_spike_rates);
    drive_data.Mean_L5_Delta = nanmean(L5all_opto_spike_rates-L5all_spont_spike_rates) %drive_data.Mean_L5_Opto-drive_data.Mean_L5_Spont;
    
    figure(opto_fig_h)
        
        % Opto raster
        subplot(2,3,1)
        raster_plot(opto_spikes,2);
        xlim(opto_plot_lims)
        ylabel('Trial number')
        xlabel('Time (s)')
        fixplot
        title('Opto only raster plot')
        
        % Opto PSTH
        subplot(2,3,2)
        [opto_psth_handle, opto_psth_counts] = psth(opto_spikes,opto_psth_bins);
        title('Opto only PSTH')
        fixplot
        
        % Opto spike density plot
        subplot(2,3,3)
        [image_handle, opto_spike_density_counts] = spike_density_plot(opto_spikes,1,opto_psth_bins);
        ylabel('Channel')
        xlabel('Time (s)')
        color_lims = [0 robust_max(opto_spike_density_counts(:),clim_perc)];
        set(gca,'CLim',color_lims)
        colorbar
        title(['Opto only spike density'])
        
    end;
     %% Layer 2_3 spikes
    
     spikes                      = cond_data(a).spikes(Layer_2_3_Chans,:,:) - cond_data(a).whisk_onset;
    
    % Quantify spikes
    all_spike_rates(:,a)        = spike_rate_by_trial(spikes(:,:,:), resp_win);
    [peak_spike_rates(:,a), peak_spike_times(:,a)]  = peak_ROF_by_trial(spikes, resp_win, rate_kernel_win);

    % Quantify opto spikes
    opto_spikes                 = cond_data(a).spikes(:,:,:) - cond_data(a).LED_onset;
    all_opto_spike_rates(:,a)  	= spike_rate_by_trial(opto_spikes, opto_resp_win);
    
    % Quantify spikes in spontaneous window
    spont_spikes              	= cond_data(a).spikes(:,:,:);
    all_spont_spike_rates(:,a)	= spike_rate_by_trial(spont_spikes, opto_resp_win);
    
    
       
    %% Make plots
    figure(raster_fig_h)
    
    % Raster plot
    subplot(1,2,a)
    raster_plot(spikes,2);
    xlim(plot_lims)
    ylabel('Trial number')
    xlabel('Time (s)')
    fixplot
    title(cond_names{a})
    % PSTH
    figure(psth_fig_h)
    subplot(1,2,a)
    [psth_handle psth_counts(:,a)] = psth(spikes,psth_bins);
    title(cond_names{a})
    fixplot
     
end

% Make sure that y-axes are the same in PSTH subplots in the same figure
figure(psth_fig_h)
subplot_equal_y

%% Corrections for opto background and for spontaneous

% correct for opto background
all_spike_rates(:,1)    = all_spike_rates(:,1) - mean(all_opto_spike_rates(:,2));

% correct for spontaneous
all_spike_rates(:,2)    = all_spike_rates(:,2) - mean(all_spont_spike_rates(:,2));

%% Plotting:

% Create figure of the right size
mean_plots_h            = figure;
set(gcf,'Units','normalized','Position',[.1 .2 .8 .4],'PaperPositionMode','auto','Name',[ephys_data.data_folder ' Power: ' num2str(ephys_data.conditions(2).LED_power)])

%% Beeswarmplot spike rates

group_labels        = meshgrid(1:size(all_spike_rates,2),1:size(all_spike_rates,1));
plot_spike_counts   = all_spike_rates(:);
plot_labels         = group_labels(:);

subplot(1,3,1)
beeswarmplot(plot_spike_counts,plot_labels,cond_names);
fixplot
ylabel('Spike rate')

[spike_rate_h,spike_rate_p]               = ttest2(all_spike_rates(:,1),all_spike_rates(:,2));
[spike_rate_rank_p, spike_rate_rank_h]    = ranksum(all_spike_rates(:,1),all_spike_rates(:,2));

title(['Binned spike rate, p = ' num2str(spike_rate_p)]);


%% Beeswarmplot peak spike rate

group_labels        = meshgrid(1:size(peak_spike_rates,2),1:size(peak_spike_rates,1));
plot_peak_rates     = peak_spike_rates(:);
plot_labels         = group_labels(:);

subplot(1,3,2)
beeswarmplot(plot_peak_rates,plot_labels,cond_names);
fixplot
ylabel('Peak spike rate')

[peak_rate_h,peak_rate_p]               = ttest2(peak_spike_rates(:,1),peak_spike_rates(:,2));
[peak_rate_rank_p, peak_rate_rank_h]    = ranksum(peak_spike_rates(:,1),peak_spike_rates(:,2));

title(['Peak spike rate, p = ' num2str(peak_rate_p)]);

%% Beeswarmplot peak spike time

group_labels        = meshgrid(1:size(peak_spike_times,2),1:size(peak_spike_times,1));
plot_peak_times     = peak_spike_times(:);
plot_labels         = group_labels(:);

subplot(1,3,3)
set(gcf,'PaperPositionMode','auto')
beeswarmplot(plot_peak_times,plot_labels,cond_names);
fixplot
ylabel('Peak spike time')

[peak_time_h,peak_time_p]               = ttest2(peak_spike_times(:,1),peak_spike_times(:,2));
[peak_time_rank_p, peak_time_rank_h]    = ranksum(peak_spike_times(:,1),peak_spike_times(:,2));

title(['Peak spike time, p = ' num2str(peak_time_p)]);

%% Generate output data structure

drive_data.data_folder          = ephys_data.data_folder;
drive_data.channels             = channels;
drive_data.resp_win             = resp_win;
drive_data.psth_bins            = psth_bins;
drive_data.opto_psth_bins       = opto_psth_bins;
drive_data.bin_size             = bin_size;
drive_data.artifact_win         = artifact_win;

drive_data.binned_rate_by_trial = all_spike_rates;
drive_data.peak_rate_by_trial   = peak_spike_rates;
drive_data.peak_time_by_trial   = peak_spike_times;

drive_data.psths                = psth_counts;

drive_data.binned_rate_p        = spike_rate_p;
drive_data.binned_rate_rank_p   = spike_rate_rank_p;

drive_data.peak_rate_p          = peak_rate_p;
drive_data.peak_rate_rank_p     = peak_rate_rank_p;

drive_data.peak_time_p          = peak_time_p;
drive_data.peak_time_rank_p     = peak_time_rank_p;

