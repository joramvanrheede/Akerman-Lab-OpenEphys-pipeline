function timing_data = timing_results(ephys_data, channels, resp_win, psth_bins, artifact_win)
% TIMING_DATA = timing_plots(EPHYS_DATA)
% or
% TIMING_DATA = timing_plots(EPHYS_DATA, CHANNELS, RESP_WIN, PSTH_BINS, ARTIFACT_WIN)
% 
% Visualise data and extract key measures from 'Timing' experiment, in which
% an optogenetic stimulus is pulsed at varying time intervals with respect to
% a whisker stimulus.
% 
% This function will plot the following:
% 
% Figure 1: Raster plots for each of the time delays
% Figure 2: Post stimulus time histograms (PSTHs) for each of the time delays
% Figure 3: Spike density plots for each of the time delays
% Figure 4: Point plots showing binned spike rate, peak spike rate and peak
%           spike time for each of the time delays
% 
% REQUIRED INPUTS:
% 
% EPHYS_DATA: EPHYS_DATA structure as generated by preprocess_multiunit, containing
% spike data and metadata for a 'Timing' type experiment.
% 
% OPTIONAL:
% 
% CHANNELS:     Specify which channels, e.g. [1:8]; Default is ':' (all). 
% RESP_WIN:     Window for assessing spiking response; Default is [0.007 0.030].
% PSTH_BINS:    Bins for PSTH and spike density plots; Default is [-0.1:0.001:0.3]
% ARTIFACT_WIN: To remove potential artifacts, spike times in this window 
%               (with respect to whisker stim onset) are set to NaN. Default 
%               is [-0.001 0.006].
% 
% OUTPUT:
% 
% TIMING_DATA structure with fields:
% 
% timing_data.data_folder             = Original data folder
% 
% timing_data.channels                = Requested channels
% timing_data.resp_win                = Requested response window
% timing_data.artifact_win            = Requested artifact window
% timing_data.psth_bins               = Bins for PSTH and spike density plots
% timing_data.bin_size                = Bin size of above
% 
% timing_data.delta_t                 = Delta_t values for each condition (opto vs whisk time difference)
% 
% timing_data.all_psth_counts         = PSTHs for all conditions, (n bins * n conditions)
% timing_data.density_rates           = Spike density rates for all conditions, (n channels * n bins * n conditions)
% 
% timing_data.binned_spike_rate       = Binned spike rate in specified response window (n trials * n conditions)
% timing_data.mean_binned_spike_rate  = Mean of binned spike rate
% timing_data.serr_binned_spike_rate  = Standard error of the mean binned spike rate
% timing_data.binned_rate_p           = P values compared to control condition
% timing_data.bonf_binned_rate_p      = Bonferroni corrected p-values compared to control condition
% 
% timing_data.peak_spike_rates        = Peak spike rate in specified response window (n trials * n conditions)
% timing_data.mean_peak_spike_rate    = Mean of peak spike rate
% timing_data.serr_peak_spike_rate    = Standard error of the mean peak spike rate
% timing_data.peak_rate_p             = P values compared to control condition
% timing_data.bonf_peak_rate_p        = Bonferroni corrected p-values compared to control condition
% 
% timing_data.peak_spike_times        = Peak spike time in specified response window (n trials * n conditions)
% timing_data.mean_peak_spike_time    = Mean of peak spike time
% timing_data.serr_peak_spike_time    = Standard error of the mean peak spike time
% timing_data.peak_time_p             = P values compared to control condition
% timing_data.bonf_peak_time_p        = Bonferroni corrected p-values compared to control condition
%

% Default to all channels
if nargin < 2 || isempty(channels)
    channels        = ':';
end

% Default to resp win from 6ms (after any artifacts) to 30ms (should capture
% most of the direct stimulus-driven activity
if nargin < 3 || isempty(resp_win)
    resp_win        = [0.006 0.030];
end

% Default PSTH range; 300ms post stimulus should capture even long-tailed responses
if nargin < 4 || isempty(psth_bins)
    psth_bins       = [-0.1:0.001:0.3];
end

% Set any spikes during this window to NaN; -0.001 to 0.006 is where any piezo artifacts
% may occur
if nargin < 5
    artifact_win    = [-0.001 0.006];
end

% Hardcoded for now:
rate_kernel_size    = 0.01;
% opto_resp_win       = [0.006 0.030];


%% Code execution starts here

opto_onsets             = [ephys_data.conditions(:).LED_onset];
n_delta_ts              = length(opto_onsets);

counter                 = 0;
for a = 1:length(ephys_data.conditions)
    
    % Fetch data for this condition
    this_cond                       = ephys_data.conditions(a);
    
    % Increment counter and find stimulus data for this condition
    counter                         = counter + 1;
    this_t_whisk                    = this_cond.whisk_onset;
    this_t_opto                     = this_cond.LED_onset;

    if isfield(this_cond,'whisk_stimulator')
        this_whisker_nr                 = this_cond.whisk_stimulator;
    else
        this_whisker_nr                 = this_cond.whisk_stim_nr;
    end
    n_trials(counter)             	= this_cond.n_trials;
    
    delta_t(counter)                = this_t_opto - this_t_whisk;
    whisker_nr(counter)             = this_whisker_nr;
    opto_power(counter)             = this_cond.LED_power;
    
    % Get spike data and remove artifact spikes
    spikes                        	= this_cond.multiunit_spikes(channels, :, :);
    opto_spikes                     = spikes - this_t_opto;
    whisk_spikes                	= spikes - this_t_whisk;
    
    spont_spike_rates(:,1:n_trials(counter),counter)    = spike_rates_individual(spikes, resp_win);
    opto_spike_rates(:,1:n_trials(counter),counter)     = spike_rates_individual(opto_spikes, resp_win);
    whisk_spike_rates(:,1:n_trials(counter),counter)  	= spike_rates_individual(whisk_spikes, resp_win);
%     
    q_artifact                      = whisk_spikes > artifact_win(1) & whisk_spikes < artifact_win(2);
    whisk_spikes(q_artifact)     	= NaN;
    
    % Binned spike rate
    [spike_rates(1:n_trials(counter),counter)]        = spike_rate_by_trial(whisk_spikes, resp_win);
    mean_spike_rate(counter)        = mean(spike_rates(:,counter));
    serr_spike_rate(counter)        = serr(spike_rates(counter,:));
    
    % Peak spike rate and time
    [peak_spike_rates(1:n_trials(counter),counter), peak_spike_times(1:n_trials(counter),counter)]  = peak_ROF_by_trial(whisk_spikes, resp_win, rate_kernel_size);
    
    mean_peak_spike_rate(counter)   = mean(peak_spike_rates(:,counter));
    serr_peak_spike_rate(counter)   = serr(peak_spike_rates(:,counter));
    
    mean_peak_spike_time(counter)   = mean(peak_spike_times(:,counter));
    serr_peak_spike_time(counter)   = serr(peak_spike_times(:,counter));
    

    [~, all_psth_counts(:,counter), psth_bins]  = psth(whisk_spikes, psth_bins, false);

    [~, density_rates(:,:,counter)]	= spike_density_plot(whisk_spikes,1, psth_bins, false);
    
end


%% Significance of response
spont_spike_by_trial    = squeeze(mean(spont_spike_rates,1));
spont_spike_std         = std(spont_spike_by_trial(:));
spont_spike_mean        = mean(spont_spike_by_trial(:));

control_whisk_spikes	= squeeze(whisk_spike_rates(:,:,end));
control_whisk_by_trial  = mean(control_whisk_spikes);
mean_control_whisk      = mean(control_whisk_by_trial);

mean_control_whisk_rate = mean_control_whisk - spont_spike_mean;
mean_control_whisk_stds = mean_control_whisk_rate / spont_spike_std;

control_opto_spikes     = squeeze(opto_spike_rates(:,:,end));
control_opto_by_trial   = mean(control_opto_spikes);
mean_control_opto       = mean(control_opto_by_trial);

mean_control_opto_rate  = mean_control_opto - spont_spike_mean;
mean_control_opto_stds  = mean_control_opto_rate / spont_spike_std;

[~,opto_response_p]    	= ttest2(spont_spike_by_trial(:),control_opto_by_trial(:));
[~,whisk_response_p]  	= ttest2(spont_spike_by_trial(:),control_whisk_by_trial(:));

%% Some stats on the firing rate differences compared to control

[~, binned_rate_p]  = ttest2(spike_rates,repmat(spike_rates(:,end),1,length(delta_t)));
[~, peak_rate_p]    = ttest2(peak_spike_rates,repmat(peak_spike_rates(:,end),1,length(delta_t)));
[~, peak_time_p]    = ttest2(peak_spike_times,repmat(peak_spike_times(:,end),1,length(delta_t)));

% Bonferroni correction for multiple comparisons; this should be on the conservative side
bonf_binned_rate_p          = binned_rate_p * (length(delta_t)-1);
bonf_peak_rate_p            = peak_rate_p * (length(delta_t)-1);
bonf_peak_time_p            = peak_time_p * (length(delta_t)-1);


%% Set output variable timing_data

timing_data.data_folder             = ephys_data.data_folder;

timing_data.channels                = channels;
timing_data.resp_win                = resp_win;
timing_data.artifact_win            = artifact_win;
timing_data.psth_bins               = psth_bins;
timing_data.bin_size                = mean(diff(psth_bins));

timing_data.delta_t                 = delta_t;

timing_data.all_psth_counts         = all_psth_counts;
timing_data.density_rates           = density_rates;

timing_data.binned_spike_rate       = spike_rates;
timing_data.mean_binned_spike_rate  = mean_spike_rate;
timing_data.serr_binned_spike_rate  = serr_spike_rate;
timing_data.binned_rate_p           = binned_rate_p;
timing_data.bonf_binned_rate_p      = bonf_binned_rate_p;

timing_data.peak_spike_rates        = peak_spike_rates;
timing_data.mean_peak_spike_rate    = mean_peak_spike_rate;
timing_data.serr_peak_spike_rate    = serr_peak_spike_rate;
timing_data.peak_rate_p             = peak_rate_p;
timing_data.bonf_peak_rate_p        = bonf_peak_rate_p;

timing_data.peak_spike_times        = peak_spike_times;
timing_data.mean_peak_spike_time    = mean_peak_spike_time;
timing_data.serr_peak_spike_time    = serr_peak_spike_time;
timing_data.peak_time_p             = peak_time_p;
timing_data.bonf_peak_time_p        = bonf_peak_time_p;

%% 
timing_data.whisk_response_p        = whisk_response_p;
timing_data.control_whisk_rate      = mean_control_whisk_rate;
timing_data.control_whisk_stds      = mean_control_whisk_stds;

timing_data.opto_response_p         = opto_response_p;
timing_data.control_opto_rate       = mean_control_opto_rate;
timing_data.control_opto_stds       = mean_control_opto_stds;


