function merged_data = merge_single_and_multi_unit(single_unit_data, multi_unit_data)
% function MERGED_DATA = MERGE_SINGLE_AND_MULTI_UNIT(SINGLE_UNIT_DATA, MULTI_UNIT_DATA)
% 
% Integrates single unit data into existing multi-unit ephys data
% structure.
% 
% INPUTS:

% SINGLE_UNIT_DATA: An ephys_data structure with single unit spike data by
% condition for each trial within a protocol, as generated by
% SYNC_CURATED_DATA.
% 
% MULTI_UNIT_DATA: An ephys_data structure with multiunit spike and LFP 
% data by condition for each trial within a protocol, organised by channel,
% as generated by PREPROCESS_MULTIUNIT.
% 
% OUTPUTS:
% 
% MERGED_DATA: An ephys_data structure that is based on MULTI_UNIT_DATA,
% but with a new field .UNIT_SPIKES added to each condition, containing the
% spike data for identified single units. The overarching struct also
% contains the field .UNIT_DEPTHS, with the depth info for each unit.
% 


%% Extensive compatibility checks to make sure files correspond - we do not want errors creeping in here


% First check that files come from the same raw data recording, using the
% data folder saved in the structs
multi_unit_folders_win  = split(multi_unit_data.data_folder,'\');
multi_unit_folders_mac  = split(multi_unit_data.data_folder,'/');

single_unit_folders_win = split(single_unit_data.data_folder,'\');
single_unit_folders_mac = split(single_unit_data.data_folder,'/');

if length(single_unit_folders_mac) > length(single_unit_folders_win)
    single_unit_folder  = single_unit_folders_mac{end};
else
    single_unit_folder  = single_unit_folders_win{end};
end

if length(multi_unit_folders_mac) > length(multi_unit_folders_win)
    multi_unit_folder  = multi_unit_folders_mac{end};
else
    multi_unit_folder  = multi_unit_folders_win{end};
end

disp(['Merging:'])
disp(['Single unit data: ' single_unit_folder])
disp(['Multiunit data: ' multi_unit_folder])

if ~strcmp(single_unit_folder,multi_unit_folder)
    error('Input mismatch - Input single and multi unit data are based on different raw data folders.')
end

% Now we have established that the files are based on the same raw data,
% check that there are no mismatches in the preprocessing settings - e.g.
% different numbers of conditions or other things that could cause
% misalignment between trials and conditions:

if length(multi_unit_data.conditions) ~= length(single_unit_data.conditions)
    error('Different number of conditions for single_unit_data and multi_unit_data; target file mismatch or preprocessing error in at least one of the files')
end

mismatch_found = 0;
for a = 1:length(multi_unit_data.conditions)
    multi_cond      = multi_unit_data.conditions(a);
    single_cond     = single_unit_data.conditions(a);
    
    if multi_cond.n_trials ~= single_cond.n_trials
        warning(['Unequal n trials in condition #' num2str(a)])
        disp(['Multiunit n trials = ' num2str(multi_cond.n_trials)])
        disp(['Single unit n_trials = ' num2str(single_cond.n_trials)])
        mismatch_found = true;
    end
    if multi_cond.whisk_onset ~= single_cond.whisk_onset
        warning(['Unequal whisk_onset in condition #' num2str(a)])
        disp(['Multiunit whisk onset = ' num2str(multi_cond.whisk_onset)])
        disp(['Single unit whisk onset = ' num2str(single_cond.whisk_onset)])
        mismatch_found = true;
    end
    if multi_cond.whisk_stimulator ~= single_cond.whisk_stim_nr
        warning(['Unequal whisk_stimulator in condition #' num2str(a)])
        disp(['Multiunit whisk sstimulator = ' num2str(multi_cond.whisk_stimulator)])
        disp(['Single unit whisk stimulator = ' num2str(single_cond.whisk_stim_nr)])
        mismatch_found = true;
    end
    if round(multi_cond.whisk_amplitude/5) ~= round(single_cond.whisk_amp/5)
        warning(['Unequal whisk_amplitude in condition #' num2str(a)])
        disp(['Multiunit whisk amplitude = ' num2str(multi_cond.whisk_amplitude)])
        disp(['Single unit whisk amplitude = ' num2str(single_cond.whisk_amp)])
        mismatch_found = true;
    end
    if multi_cond.whisk_velocity ~= single_cond.whisk_velocity
        warning(['Unequal whisk_velocity in condition #' num2str(a)])
        disp(['Multiunit whisk velocity = ' num2str(multi_cond.whisk_velocity)])
        disp(['Single unit whisk velocity = ' num2str(single_cond.whisk_velocity)])
        mismatch_found = true;
    elseif multi_cond.whisk_frequency ~= single_cond.whisk_freq
        warning(['Unequal whisk_frequency in condition #' num2str(a)])
        disp(['Multiunit whisk frequency = ' num2str(multi_cond.whisk_frequency)])
        disp(['Single unit whisk frequency = ' num2str(single_cond.whisk_frequency)])
        mismatch_found = true;
    end
    if multi_cond.LED_onset ~= single_cond.LED_onset
        warning(['Unequal LED_onset in condition #' num2str(a)])
        disp(['Multiunit LED onset = ' num2str(multi_cond.LED_onset)])
        disp(['Single unit LED onset = ' num2str(single_cond.LED_onset)])
        mismatch_found = true;
    end
    if round(multi_cond.LED_power/5) ~= round(single_cond.LED_power/5)
        warning(['Unequal LED_power in condition #' num2str(a)])
        disp(['Multiunit LED power = ' num2str(multi_cond.LED_power)])
        disp(['Single unit LED power = ' num2str(single_cond.LED_power)])
        mismatch_found = true;
    end
    if multi_cond.LED_duration ~= single_cond.LED_duration
        warning(['Unequal LED_duration in condition #' num2str(a)])
        disp(['Multiunit LED duration = ' num2str(multi_cond.LED_duration)])
        disp(['Single unit LED duration = ' num2str(single_cond.LED_duration)])
        mismatch_found = true;
    end
end

% Ask for user input to judge whether mismatches are serious
if mismatch_found
    beep
    do_continue = questdlg('Mismatches found between single unit and multi-unit condition data; see warnings in command window for details. Continue with merging files anyway?','Title','Yes','No','No');
else
    do_continue = 'Yes';

   % beep
    do_continue = questdlg('Mismatches found between single unit and multi-unit condition data; see warnings in command window for details. Continue with merging files anyway?','Title','Yes','No');
end

%% If all is well add units data to ephys data
switch do_continue
    case 'No'
        error('Aborted by user after mismatch found')
    case 'Yes'
        merged_data     = multi_unit_data;
        
        for a = 1:length(merged_data.conditions)
            merged_data.conditions(a).multiunit_spikes  = merged_data.conditions(a).spikes;
            merged_data.conditions(a).spikes            = single_unit_data.conditions(a).spikes;
            merged_data.conditions(a).unit_spikes    = single_unit_data.conditions(a).spikes;
            merged_data.conditions(a).multiunit_spikes = multi_unit_data.conditions(a).spikes;
        end
        merged_data.conditions = rmfield(merged_data.conditions,'spikes');
        
        merged_data.unit_depths  = single_unit_data.unit_depths;
end

